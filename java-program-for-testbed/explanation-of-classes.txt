Path: java-program-for-testbed/src/main/java

-----------------------------------------Generating Real Network Data------------------------------------------

The combination of the three Java classes, CSVSampler, CSVParameterCalculator, and DataGenerator, forms a comprehensive process for analyzing and generating network data. Initially, CSVSampler utilizes real network data from a CSV file to create a representative sample based on predefined percentages for various technologies. CSVParameterCalculator then analyzes these data to calculate statistical parameters such as means and standard deviations for various network characteristics. Finally, DataGenerator utilizes these statistical parameters to simulate realistic network data for a specified number of peers. This integrated approach enables precise analysis and effective simulation of network performance, which is crucial for planning and optimizing network topologies.

**1 - CSVSampler**
The CSVSampler class samples data from a CSV file based on specified criteria and writes the sampled data to a new file. It is designed to selectively sample data for different technologies based on given percentages.

**2 - CSVParameterCalculator**
The Java class CSVParameterCalculator is designed to read network performance data from a reduced CSV file (generated from the CSVSampler class) and calculate statistical parameters for various network technologies. Here is a detailed description of how it works and its main components:

**3 - DataGenerator**
The Java class DataGenerator is designed to simulate network data for a specific number of peers. The class allows for generating various network characteristics such as technology type, upload/download speeds, latency, and packet loss for each peer. This functionality is particularly useful for creating an extensive set of simulated network data without the need to read data from a CSV file every time. Instead, the class uses means and standard deviations previously calculated from real data (e.g., using the CSVParameterCalculator class) to simulate realistic network statistics.

----------------------------------Generating and Analyzing Network Topology------------------------------------

The NetworkTopologyGenerator (or OnlyFromLectureStudioServerToPeers) class generates a simulated network topology in a JSON file, including details like upload/download speeds, latency, and packet loss for a specified number of peers. The ConnectionAnalysis class complements it by analyzing the JSON file to ensure the network exhibits a complete mesh structure, which is crucial for network integrity and performance.

**4 - GeneratorOfNetworkTopology**
The Java class GeneratorOfNetworkTopology is specifically designed to create a simulated network topology in JSON format based on data generated by the DataGenerator class. Here is an explanation of how it works:

**5 - OnlyFromLectureStudioServerToPeers**
The Java class OnlyFromLectureStudioServerToPeers is designed to generate a JSON file that represents network connections from a single source, identified as lectureStudioServer, to multiple peer nodes in a network simulation. Here is a detailed explanation of how it operates and its role in the overall process:

**6 - ConnectionAnalysis**
The Java class ConnectionAnalysis is developed to analyze network connections in a network topology. Its primary purpose is to read and process network configuration data generated in a JSON file by the GeneratorOfNetworkTopology class. Here is a detailed explanation of how it operates and its role in the overall process:

-----------------------------------------Integrating of P2P Algorithm------------------------------------------

**7 - NetworkConfigParser**
The NetworkConfigParser class is designed for parsing and processing network configuration data. This class reads a JSON file that defines the network topology, including connections and super-peers. It provides functionalities to extract and organize various aspects of the network configuration such as:The names of super-peers, connection details between peers, mapping super-peers to their connected peers and generating a list of distinct peer names, excluding super-peers and the lectureStudioServer.

-----------------------------------------Creating a Containerlab File------------------------------------------
The combination of the ConnectionDetails and YMLGenerator classes forms a comprehensive approach to creating a testbed.

**8 - Connection Details**
The ConnectionDetails class simulates and manages network connections, focusing on statistics related to network characteristics among peers. It leverages the Gson library to read and write JSON data, indicating that the program handles JSON data for input/output operations related to network configurations and statistics. The primary functionalities include reading network configuration data from JSON files, processing command-line arguments to customize the simulation, calculating and allocating bandwidth resources among peers, as well as writing updated configurations and statistics back to JSON files. The class also allows for adjustments through command-line arguments, including the number of peers, the use of super-peers, and the size of files to be transferred.

**9 - YAMLGenerator**
The YMLGenerator class is designed for creating a YAML (YML) file that defines the network topology for a container-based network testbed. This class reads network configuration details from a JSON file and translates them into a YML format suitable for container orchestration tools like ContainerLab. It supports generating configurations for a lectureStudioServer, multiple peers, super-peers and trackerPeer, includes options for additional monitoring and visualization tools like Prometheus, cAdvisor, and Grafana. The class handles the assignment of network interfaces, IP addresses, and environment variables for each node in the network, ensuring a cohesive and functional network setup for testing and experimentation purposes.

