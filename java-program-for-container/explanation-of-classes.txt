Path: java-program-for-container/src/main/java

-----------------------------------------Communication and Data Tranmission between Containers------------------------------------------
The combination of these classes collaborate to facilitate efficient data transfer. The LectureStudioServer initiates the process by acting as the primary server, handling multiple connections, and managing file transfers to various clients (peers and super-peers). SuperPeers operate as both servers and clients, receiving files from the LectureStudioServer and further distributing them to other Peers. Peers have only a client role. The FileReceiverHandler and FileSenderHandler, integral components of the Netty framework used by LectureStudioServer, Peers and SuperPeers, specialize in receiving and sending files, respectively. This setup ensures a seamless and efficient data transfer process across the network, enabling robust testing and analysis of network performance and reliability.

**1 - LectureStudioServer**
The LectureStudioServer class is designed to act as a server primarily for conducting network performance tests. This class is capable of running server instances on multiple IP addresses simultaneously, handling connections and file transfers to multiple clients. It uses the Netty framework for efficient network communication, setting up server bootstrap and channel handlers to manage incoming network traffic. The class is capable of binding to different IP addresses, specified during its initialization, and listens on a designated port for incoming connections. Key functionalities include starting server instances on specified IP addresses, handling file sending operations, and logging network performance metrics such as file send duration.

**3 - Peer**
The Peer class represents a node in a distributed network system, capable of both client and server functionalities. Designed to work in environments with varying network conditions, this class plays a pivotal role in testing and evaluating network performance, especially in containerized settings. The class leverages the Netty library for efficient network communication, handling file transfers, and maintaining connection states. It manages critical metrics such as file transfer duration and connection duration, providing insights into network efficiency and reliability. Key functionalities include initiating connections to other peers, receiving and sending files, and dynamically adapting to the role of server or client based on environmental settings. This adaptability makes it suitable for complex network setups requiring robust testing and performance analysis.
 
**2 - SuperPeer**
The SuperPeer class represents a key component in a distributed network system, providing both server and client functionalities. This class is responsible for sending and receiving files among peers in a network. It implements both the  server side, which sends files to other peers, and the client side, which receives files from the lecutreStudio-server. Utilizing the Netty library for network operations, this class is configured to listen on specific ports for server and client operations. It manages the network connection duration and file transfer duration to measure and analyze network performance. Additionally, it has mechanisms for managing connection status, including retrying connection attempts and synchronizing file transfer processes.

**4 - FileReceiverHandler**
The FileReceiverHandler class is a Netty channel handler specifically designed for receiving files over a network. Extending the SimpleChannelInboundHandler class, it efficiently handles the data received from a network channel, writing it to a specified file path. This class plays a crucial role in network-based file transfer operations, making it a key component in distributed systems where file sharing or data exchange is required. This handler supports functionality for both the Peer and SuperPeer classes, making it versatile for various network roles. Upon activation of the channel, it initializes the file output stream to start receiving the data. As the data arrives, it writes the bytes to the file and keeps track of the total number of bytes received. Upon completion of the file transfer, it calculates the transfer duration, logs the details, and notifies the associated peer or super-peer instance.
 
**5- FileSenderHandler**
The FileSenderHandler class is a specialized Netty channel handler used for sending files over a network. Extending the SimpleChannelInboundHandler class, it is designed to efficiently handle the process of reading a file from the local file system and sending it over a network channel. This class is integral in scenarios where file distribution or data dissemination is required in a distributed network system. This handler can be associated with either a super-peer or a lectureStudioServer, allowing it to be versatile in different network roles. Upon activation of the channel, the handler reads the specified file and streams it over the network to the connected peer. It keeps track of the start time to calculate the duration of the file transfer, providing important metrics for network performance analysis.

